<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    
    <title>Document</title>
</head>
<body>
    @include('components/navbarUsuario') <!-- Incluye la barra de navegación -->
    <h1>Bienvenido {{ $nombreUser->nombreCompleto['nombres'][0] }}
     {{ $nombreUser->nombreCompleto['apellidoPaterno'] }} 
     {{ $nombreUser->nombreCompleto['apellidoMaterno'] }}</h1> {{-- mandar datos como arreglo de objetos --}}


     @if($registros->isEmpty())
     <p>No hay registros disponibles.</p>
 @else
     <table border="1">
         <thead>
             <tr>
                 <th>Fecha</th>
                 <th>Tipo de Signo Vital</th>
                 <th>Máximo</th>
                 <th>Mínimo</th>
                 <th>Promedio</th>
             </tr>
         </thead>
         <tbody>
             @foreach($registros as $registro)
             <tr>
                 <td>{{ $registro->fechaDeToma }}</td>
                 <td>{{ $registro->sVital }}</td>
                 <td>{{ $registro->nivelRegistrado['maximo'] }}</td>
                 <td>{{ $registro->nivelRegistrado['minimo'] }}</td>
                 <td>{{ $registro->nivelRegistrado['promedio'] }}</td>
             </tr>
             @endforeach
         </tbody>
     </table>
 @endif

 <a href="{{ url('/grafica') }}">
    <button style="padding: 10px; background: blue; color: white; border-radius: 5px; border: none; cursor: pointer;">
        Ver Gráfica de Signos Vitales
    </button>
</a>



</body>
</html>


GRAFICA 

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gráfica de Signos Vitales</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            padding: 20px;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            width: 90%;
            max-width: 600px;
            text-align: center;
        }
        canvas {
            max-width: 100%;
            height: 300px !important;
        }
        select {
            padding: 8px;
            margin-bottom: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>
    @include('components/navbar') <!-- Incluye la barra de navegación -->

    <div class="container">
        <h2>Gráfica de Signos Vitales</h2>
        
        <!-- Selector de signo vital -->
        <label for="sVital">Selecciona un Signo Vital:</label>
        <select id="sVital" onchange="cargarGrafica()">
            <option value="Cardiaca">Frecuencia Cardiaca</option>
            <option value="Spo2">Oxigenación (SpO2)</option>
            <option value="Temperatura">Temperatura</option>
        </select>

        <canvas id="graficaVitales"></canvas> <!-- Aquí se renderiza la gráfica -->
    </div>

    <script>
        let chart; // Variable para almacenar la gráfica


        async function cargarGrafica() {
    const sVital = document.getElementById('sVital').value;

    try {
        const response = await fetch(`/api/registros/${sVital}`);
        const data = await response.json();

        if (data.error) {
            alert("Error: " + data.error);
            return;
        }

        if (!data.length) {
            alert(`No hay datos para ${sVital}`);
            return;
        }

        const fechas = data.map(registro => registro.fechaDeToma);
        const valores = data.map(registro => registro.nivelRegistrado.promedio);

        if (chart) chart.destroy(); // Borra la gráfica anterior

        // Selección del tipo de gráfico
        let tipoGrafico = 'line';
        if (sVital === 'Temperatura') tipoGrafico = 'bar';
        if (sVital === 'Spo2') tipoGrafico = 'line'; // También puedes probar 'area'

        const ctx = document.getElementById('graficaVitales').getContext('2d');
        chart = new Chart(ctx, {
            type: tipoGrafico,
            data: {
                labels: fechas,
                datasets: [{
                    label: `Nivel Promedio - ${sVital}`,
                    data: valores,
                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 2,
                    fill: sVital === 'Spo2' // Relleno solo para oxigenación
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: { title: { display: true, text: 'Fecha' }},
                    y: { title: { display: true, text: 'Nivel Promedio' }}
                }
            }
        });

    } catch (error) {
        console.error("Error al obtener los datos:", error);
        alert("Hubo un error al cargar los datos.");
    }
}


        // Cargar la gráfica inicial con el primer valor del selector
        cargarGrafica();
    </script>


<a href="{{ url('/usuario') }}">
    <button style="padding: 10px; background: blue; color: white; border-radius: 5px; border: none; cursor: pointer;">
        Ver Gráfica de Signos Vitales
    </button>
</a>

</body>
</html>



WEB.PHP



<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\AuthController;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "web" middleware group. Make something great!
|
*/

Route::get('/', function () {
    return view('inicio');
})->name('inicio');

Route::get('/about', function () {
    return view('about');
})->name('about');

Route::get('/nosotros', function () {
    return view('nosotros');
})->name('nosotros');


Route::get('/descargar', function () {
    return view('descargar');
})->name('descargar');


Route::get('/ingresar', function () {
    return view('ingresar');
})->name('ingresar');



Route::get('/usuario', function () {
    return view('vistaUsuario');
})->name('usuario');


Route::get('/grafica', function () {
    return view('grafica');
})->name('grafica');


Route::get('/mensaje', function () {
    
});




// esta guarda los datos en la sesion global de laravel
Route::post('/set-parameters', function (Request $request) {
    // Guardar los parámetros en la sesión
    session(['param1' => $request->param1, 'param2' => $request->param2]);
    return response()->json(['success' => true]);
});


Route::get('/usuarios', function () {
    // Obtener los datos de la colección "usuarios"
    $usuarios = DB::connection('mongodb')->table('usuarios')->get();

    // Recuperar los parámetros guardados en la sesión
    $param1 = session('param1'); // Nombre de usuario
    $param2 = session('param2'); // Contraseña

    // Buscar el usuario con el nombre de usuario proporcionado
    $usuarioEncontrado = $usuarios->firstWhere('nameUser', $param1);
    

   // var_dump( $usuarioEncontrado->nombreCompleto['apellidoPaterno']);

    // Verificar si el usuario existe y si la contraseña es correcta


     //if ($usuarioEncontrado && $usuarioEncontrado->contrasena === $param2) {
        // Redirigir a la vista con el nombre de usuario
      //  return view('vistaUsuario', ['nombreUser' => $usuarioEncontrado]);

        if ($usuarioEncontrado && $usuarioEncontrado->contrasena === $param2) {
            // Obtener los registros del usuario autenticado
            $registros = DB::connection('mongodb')->table('registros')
                ->where('userName', $param1) // Filtrar por el usuario autenticado
                ->orderBy('fechaDeToma', 'desc') // Ordenar por fecha
                ->get();
    
            // Enviar usuario y registros a la vista
            return view('vistaUsuario', [
                'nombreUser' => $usuarioEncontrado,
                'registros' => $registros
            ]);

        } else {
            // Redirigir a otra página si los datos son incorrectos
            //eturn 'Usuario no encontrados';
            return redirect()->back()->with('error', 'Esta cuenta no existe.');
        } 
});

Route::get('/api/registros/{sVital}', function ($sVital) {
    $param1 = session('param1'); // Usuario autenticado

    // Verificar que el signo vital exista en la BD con el nombre correcto
    $signosValidos = ['Spo2', 'Cardiaca', 'Temperatura']; 

    if (!in_array($sVital, $signosValidos)) {
        return response()->json(["error" => "Signo vital no válido"], 400);
    }

    // Buscar los registros en la BD
    $registros = DB::connection('mongodb')->table('registros')
        ->where('userName', $param1)
        ->where('sVital', $sVital)
        ->orderBy('fechaDeToma', 'asc')
        ->get();

    return response()->json($registros);
});







